Detected kernel version 4.15.0, which is below the recommended minimum of 5.5.0; this can cause the process to hang. It is recommended to upgrade the kernel to the minimum version or higher.
CUDA device index 3 is not invalid. Using CPU.
文件夹 'CHESHIRE/hybird_LLM_GCN_ResNet_9E_6/MithrilJS' 不存在。
Data has been loaded successfully for training!
Start training!
  0%|          | 0/4600 [00:00<?, ?it/s]  0%|          | 1/4600 [00:04<5:14:40,  4.11s/it]  0%|          | 2/4600 [00:05<3:32:19,  2.77s/it]  0%|          | 3/4600 [00:07<2:33:06,  2.00s/it]  0%|          | 4/4600 [00:08<2:04:30,  1.63s/it]  0%|          | 5/4600 [00:09<1:48:49,  1.42s/it]  0%|          | 6/4600 [00:10<1:40:12,  1.31s/it]  0%|          | 7/4600 [00:13<2:34:24,  2.02s/it]Traceback (most recent call last):
  File "main.py", line 172, in <module>
    main(root_Repo=repopath, device=device)
  File "main.py", line 136, in main
    result = pro.train((train_hyperlink, train_labels))
  File "/root/workspace/hyperlink-Traceability/processerHook/processer_BAAI.py", line 27, in train
    self.trainer.train()
  File "/root/workspace/hyperlink-Traceability/model/models/trainer_hook.py", line 125, in train
    trainer.train()
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/transformers/trainer.py", line 2052, in train
    return inner_training_loop(
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/transformers/trainer.py", line 2388, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/transformers/trainer.py", line 3485, in training_step
    loss = self.compute_loss(model, inputs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/transformers/trainer.py", line 3532, in compute_loss
    outputs = model(**inputs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/workspace/hyperlink-Traceability/model/models/CHESHIRE/BAAI_Model_splitGraph.py", line 157, in forward
    x = self.head_gconv_layers(x, edge_index)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/conv/gat_conv.py", line 366, in forward
    out = self.propagate(edge_index, x=x, alpha=alpha, size=size)
  File "/tmp/torch_geometric.nn.conv.gat_conv_GATConv_propagate_h8q62fn1.py", line 212, in propagate
    out = self.aggregate(
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/conv/message_passing.py", line 594, in aggregate
    return self.aggr_module(inputs, index, ptr=ptr, dim_size=dim_size,
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/experimental.py", line 117, in wrapper
    return func(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/aggr/base.py", line 139, in __call__
    raise e
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/aggr/base.py", line 131, in __call__
    return super().__call__(x, index=index, ptr=ptr, dim_size=dim_size,
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/aggr/basic.py", line 22, in forward
    return self.reduce(x, index, ptr, dim_size, dim, reduce='sum')
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/nn/aggr/base.py", line 185, in reduce
    return scatter(x, index, dim, dim_size, reduce)
  File "/root/miniconda3/envs/mmseg/lib/python3.8/site-packages/torch_geometric/utils/_scatter.py", line 75, in scatter
    return src.new_zeros(size).scatter_add_(dim, index, src)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.59 GiB. GPU 0 has a total capacty of 31.73 GiB of which 6.36 GiB is free. Process 18819 has 1.57 GiB memory in use. Process 20400 has 7.50 GiB memory in use. Process 26003 has 16.30 GiB memory in use. Of the allocated memory 15.19 GiB is allocated by PyTorch, and 42.41 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
  0%|          | 7/4600 [00:21<3:53:27,  3.05s/it]